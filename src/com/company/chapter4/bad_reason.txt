
    모든 클래스에는 _data라는 suffix가 붙습니다

    데이터 중심의 설계가 가진 대표적인 문제점

        캡슐화 위반

        높은 결합도

        낮은 응집도

    캡슐화 위반

        ex) Movie 클래스 ... 각주 (1) getFee, setFee등
            getFee와 setFee 메서드는 Movie_data 내부에서 Money_data 타입의 fee라는 이름의 인스턴스 변수가 존재하는 사실을
            퍼블릭 인터페이스에 드러낸다

        Movie가 캡슐화의 원칙을 어기게 된 근본적인 원인은 객체가 수행할 책임이 아니라 내부에 저장할 데이터에 초점을 맞춰서이다.
        우리는 접근자와 수정자에 과도하게 의존하지 말아야 한다.

        내부 상태를 들어내는 메소드를 너무 많이 사용하지 말아야 한다.

    높은 결합도

        결합도 측면에서 데이터 중심 설계가 가지는 단점은 여러 데이터 객체들을 사용하는 제어로직이 특정 객체 안에 집중된다.
        따라서 하나의 제어 객체가 다수의 데이터 객체에 강하게 결합된다.

        제어 객체인 ReservationAgency가 모든 데이터 객체에 의존한다.(Screening, Movie, DiscountCondition, Reservation)
        따라서 어떤 데이터 객체를 변경하더라도 ReservationAgency의 변경을 유발한다.

    낮은 응집도

        현재의 설계에서는 새로운 할인 정책을 추가하거나 새로운 할인 조건을 추가하기 위해 하나 이상의 클래스를 동시에 수정해야한다

        ex) 할인 정책 추가 시
            MovieType에 새로운 할인 정책 표현하는 열거형 값 추가
            ReservationAgency의 reserve 메서드의 switch 구문 case 절 추가
            새로운 할인 정책에 따라 할인 요금을 계산하기 위해 필요한 데이터 Movie에 추가


    개선 방향

        캡슐화를 지켜라
        ex) Use_Rectangle이라는 클래스가 Rectangle_data의 getter와 setter을 호출해 데이터를 외부에서 변경하고 있다.
        이는 인스턴스 변수의 존재 사실을 외부에 노출하고 있는 것이다. 따라서 변경에 취약하다.
        해결방법은 캡슐화를 강화하는 것이다. Rectangle 내부에 로직을 두어서 자신의 크기를 Rectangle_data 스스로 조절할 수 있도록
        '책임을 이동'시킨다. 객체 스스로 자신의 상태를 책임지게 한다.

        영화예매시스템 개선 전 commit : 7b47919d4c170b5bd32184242f4681e56318c0c8

        개선 후 이전에 비해 캡슐화, 결합도, 응집도를 개선하였다. 하지만 여전히 문제점이 존재한다.
        일부 캡슐화가 되어 있지 않은 곳들이 보인다. ex) Movie 할인 정책 종류 등
        DiscountCondition을 바꾸면 Movie와 Screening도 변경해야 한다(높은 결합도, 낮은 응집도도)
